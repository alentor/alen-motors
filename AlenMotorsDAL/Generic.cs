using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Helpers;

namespace AlenMotorsDAL {
    internal static class Generic {
        /// <summary>
        /// Encodes the password(string) using SHA-1 Encryption algorithm with additional 64base string(Generated from salt) for added security 
        /// </summary>
        /// <param name="password">Provide the password</param>
        /// <param name="salt">Proved the salt. An additinal encryption parameter</param>
        /// <returns></returns>
        public static string EncodePassword(string password, string salt) {
            // Generate a Base64 string
            byte[] saltBytes = Encoding.UTF8.GetBytes(salt);
            string base64 = Convert.ToBase64String(saltBytes);
            // A small addition to the regular SHA1 encryption for added security
            byte[] passBytes = Encoding.Unicode.GetBytes(password);
            byte[] src = Convert.FromBase64String(base64);
            byte[] dst = new byte[src.Length + passBytes.Length];
            Buffer.BlockCopy(src, 0, dst, 0, src.Length);
            Buffer.BlockCopy(passBytes, 0, dst, src.Length, passBytes.Length);
            // Encrypt the generated Bytes using SHA-1 Algorithm
            HashAlgorithm hashAlgorithm = HashAlgorithm.Create("SHA1");
            byte[] inArray = hashAlgorithm.ComputeHash(dst);
            return Convert.ToBase64String(inArray);
        }

        /// <summary>
        /// Resize the image to the specified width and height.
        /// </summary>
        /// <param name="image">The image to resize.</param>
        /// <param name="width">The width to resize to.</param>
        /// <param name="height">The height to resize to.</param>
        /// <returns>The resized image.</returns>
        public static Bitmap ResizeImage(Image image, int width, int height) {
            var destRect = new Rectangle(0, 0, width, height);
            var destImage = new Bitmap(width, height);
            destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);
            using (var graphics = Graphics.FromImage(destImage)) {
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                using (var wrapMode = new ImageAttributes()) {
                    wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                    graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }
            return destImage;
        }
    }
}